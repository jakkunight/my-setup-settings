#!/bin/bash
#
# Script to mount my configs on any Debian-based linux distro.
# Author: Jakku Night (@jakkunight on GitHub and XDA Developers, jakku_night on Twitch and Jakku Night on YouTube.)
#
# This script and configurations are based on my own preferences, so if you want to add or remove features, 
# feel free to fork/clone this repo (https://github.com/jakkunight/my-setup-settings) and do your stuffs.
# I'm not responsable for damaging your system, making your computer blow up or something similar.
# YOU HAVE BEEN WARNED.

# Define shell colors through ANSI ESCAPE SEQUENCES:
green="\e[32m"
red="\e[31m"
yellow="\e[33m"
blue="\e[34m"
lgreen="\e[92m"
lyellow="\e[93m"
lblue="\e[94m"
lmagenta="\e[95m"
lcyan="\e[96m"
blink_red="\033[05;31m"
restore="\033[0m"
reset="\e[0m"

# Define status logging functions:
# Shows an error message with colors:
# Usage: error <message>
# Example: error "An unexpected error ocurred."
error(){
	local msg="$@"
	if [[ -z $msg ]]; then
		msg="Unknwon ERROR. Aborting..."
	fi
	printf "${red}[ERROR]: ${msg}${reset}"
}

# Shows an info message with colors:
# Usage: info <message>
# Example: info "Executing command..."
info(){
	local msg="$@"
	if [[ -z $msg ]]; then
		msg="Nothing to notify."
	fi
	printf "${lcyan}[INFO]: ${msg}${reset}"
}

# Shows an success message with colors:
# Usage: success <message>
# Example: success "Done."
success(){
	local msg="$@"
	if [[ -z $msg ]]; then
		msg="Successfully ended."
	fi
	printf "${lgreen}[SUCCESS]: ${msg}${reset}"
}

# Shows an warning message with colors:
# Usage: warning <message>
# Example: warning "An unexpected error ocurred."
warning(){
	local msg="$@"
	if [[ -z $msg ]]; then
		msg="An error ocurred."
	fi
	printf "${lyellow}[WARNING]: ${msg}${reset}"
}

# Asks a "Y/N" question:
# Usage: ask <question> <default>
# Example: ask "Proceed?" "Y"
ask(){
	# Original function by:
	# http://djm.me/ask
	# Modifiyed for personal use by @jakkunight
	while true; do

		if [ "${2:-}" = "Y" ]; then
			prompt="Y/n"
			default=Y
		elif [ "${2:-}" = "N" ]; then
			prompt="y/N"
				default=N
		else
				prompt="y/n"
				default=
		fi

		# Ask the question
		printf "${lblue}[QUESTION]: ${1} [${prompt}]${reset} "
		read REPLY

		# Default?
		if [ -z "$REPLY" ]; then
			REPLY=$default
		fi

		# Check if the reply is valid
		case "$REPLY" in
			Y*|y*) return 0 ;;
			N*|n*) return 1 ;;
		esac
	done
}

# Pauses the program execution until the user presses ENTER:
pause(){
	local msg="$@"
	if [[ -z $msg ]]; then
		msg="Press ENTER to continue..."
	fi
	printf "${lmagenta}${msg}${reset}"
	read pause
}

# Critical Error and Exit:
fatal(){
	local msg="$@"
	if [[ -z $msg ]]; then
		msg="Unknwon ERROR. Aborting..."
	fi
	error $msg
	pause
	exit
}

# Shows a menu with options and returns the selected option:
# Usage: menu <title> <options>
# Example: cities=("Madrid" "Paris" "London" "Rome" "Berlin" "Amsterdam" "Tokyo" "Kyoto"); menu "Choose a city:" ${cities}
menu(){
	local title="$1"
	shift
	local options=("$@")
	if [[ -z "$title" ]]; then
		title="Choose an option:"
	fi
	printf "${lmagenta}"
	printf "${title}\n"
	select option; do
		if [[ 1 -le "$REPLY" && "$REPLY" -le "$#" ]]; then
			info "Choosed $option\n"
			return $(($REPLY-1));
		else
			warning "Choose a valid between 1~$#: \n"
			printf "${lmagenta}"
		fi
	done
	printf "${reset}\n"
}

# Package installing:
apt_installer(){
	local package="$@"
	if [[ -z "$package" ]]; then
		error "No package provided for installation!\n"
		return 1
	fi
	if sudo apt install ${package} -y; then
		success "Installed ${package}!\n"
		return 0
	else
		error "Couldn't install ${package}\n"
		return 1
	fi
}

nala_installer(){
	local package="$@"
	if [[ -z "$package" ]]; then
		error "No package provided for installation!\n"
	fi
	if sudo nala install ${package} -y; then
		success "Installed ${package}!\n"
		return 0
	else
		error "Couldn't install ${package}\n"
		return 1
	fi
}

curl_installer(){
	local package="$1"
	shift
	local script="$@"
	if [[ -z "$script" ]]; then
		error "No script provided for installation. Aborting...\n"
	fi
	if curl -sL ${script} | sudo sh -; then
		success "Installed ${package}!\n"
	else
		error "Couldn't install ${package}. Try again.\n"
	fi
}

wget_installer(){
	local package="$1"
	shift
	local script="$@"
	if [[ -z "$script" ]]; then
		error "No script provided for installation!\n"
	fi
	if wget -O - "$script" | sudo sh -; then
		success "Installed ${package}\n"
	else
		error "Couldn't install ${package}. Try again.\n"
	fi
}

# Installs the basic tools required to work correctly
basics(){
	info "Updating the system...\n"
	if sudo apt update && sudo apt upgrade -y; then
		success "Now the system is up-to-date.\n"
	else
		fatal "Something were wrong. Please retry as ROOT or rereun the script\n"
	fi
	info "Installing nala...\n"
	if sudo apt install nala; then
		success "nala has been installed!\n"
	else
		fatal "Something were wrong. Please retry as ROOT or rereun the script\n"
	fi
	info "Using nala to install all packages...\n"
	info "Installing git, wget, curl and htop...\n"
	if sudo nala install git wget curl htop -y; then
		success "git, wget, curl and htop have been installed!\n"
	else
		fatal "Something were wrong. Please retry as ROOT or rereun the script\n"
	fi
	info "Adding Microsoft's repos...\n"
	info "Importing GPG key...\n"
	if wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg; then
		success "Downloaded GPG keys.\n"
	else
		fatal "An error occurred when downloading the GPG keys. Aborting...\n"
	fi
	if sudo install -D -o root -g root -m 644 packages.microsoft.gpg /etc/apt/keyrings/packages.microsoft.gpg; then
		success "Installed GPG keys on the system.\n"
	else
		fatal "An error occurred when attempting to install the GPG keys. Aborting...\n"
	fi
	info "Adding sources to /etc/apt/sources.d\n"
	if sudo sh -c 'echo "deb [arch=amd64,arm64,armhf signed-by=/etc/apt/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" > /etc/apt/sources.list.d/vscode.list'; then
		success "Added sources to package manager.\n"
	else
		fatal "An unexpected error occurred when adding the sources. Aborting...\n"
	fi
	info "Cleaning extra files...\n"
	rm -f packages.microsoft.gpg
	info "Updating sources...\n"
	if sudo nala update; then
		success "Added Microsoft's repos for Visual Studio Code!\n"
	else
		error "Couldn't add Microsoft's repos!!!\n"
		fatal "If you want to install Visual Studio Code, do it by downloading the .deb installer from https://code.visualstudio.com/download\n"
	fi
}

# Installs the text editors:
text_editors(){
	info "Installing text editors...\n"
	# Options list to show in the menu:
	local options=("micro" "vim" "neovim" "mousepad" "nano" "VS Code")
	# Package list to install with nala:
	local packages=("micro" "vim" "neovim" "mousepad" "nano" "code")
	while true; do
		menu "Select your text editor: " "${options[@]}"
		local result="$?"
		if sudo nala install ${packages[$result]} -y; then
			success "Installed ${options[$result]}!\n"
		else
			error "Couldn't install ${options[$result]}.\n"
		fi
		if ask "Do you want to install another text editor?" "Y"; then
			info "Proceeding...\n"
		else
			success "Done.\n"
			break;
		fi
	done
}

# Installs tmux and powerline:
tmux_powerline(){
	info "Installing tmux...\n"
	if sudo nala install tmux -y; then
		success "Installed TMUX!\n"
	else
		fatal "Error when installing tmux\n"
	fi
	info "Installing powerline...\n"
	if sudo nala install powerline -y; then
		success "Installed Powerline!\n"
	else
		error "Couldn't install Powerline.\n"
		error "This is not a fatal error, so youneed to install it manually or jus use Tmux alone.\n"
	fi
	info "Configuring TMUX with Powerline...\n"
	if cp ./shell/.tmux.conf ~/; then
		info "Configured TMUX.\n"
	else
		warning "Couldn't configure TMUX.\n"
	fi
	if cp ./powerline/default.json /usr/share/powerline/config_files/themes/tmux; then
		info "Configured Powerline.\n"
	else
		warning "Couldn't configure Powerline.\n"
	fi
	success "Done.\n"
}

# Installs the tools for C/C++ development:
cpp_tools(){
	info "Installing C/C++ dev tools...\n"
	local options=("CLang Compiler" "GCC Compiler")
	local packages=("clang clangd" "gcc g++")
	while true; do
		menu "Select your C/C++ compiler:" "${options[@]}"
		local result="$?"
		if sudo nala install ${packages[$result]} -y; then
			success "Installed ${options[$result]}\n"
		else
			error "Couldn't install ${options{$result}}\n"
		fi
		if ask "Do you want to install another compiler?" "Y"; then
			info "Proceeding...\n"
		else
			success "Done.\n"
			break;
		fi
	done
	options=("CMake" "Ninja")
	packages=("cmake" "ninja-build")
	while true; do
		menu "Select your C/C++ build system:" "${options[@]}"
		local result="$?"
		if sudo nala install ${packages[$result]} -y; then
			success "Installed ${options[$result]}\n"
		else
			error "Couldn't install ${options{$result}}\n"
		fi
		if ask "Do you want to install another build system?" "Y"; then
			info "Proceeding...\n"
		else
			success "Done.\n"
			break;
		fi
	done
}

# Installs JavaScript dev tools:
js_tools(){
	info "Installing NodeJS...\n"
	if sudo nala install nodejs -y; then
		success "NodeJS is now installed!\n"
	else
		error "Couldn't install NodeJS. Leaving...\n"
	fi
	info "Installing npm...\n"
	if curl -qL https://www.npmjs.com/install.sh | sudo sh; then
		success "npm is now installed!\n"
	else
		error "Couldn't install npm. Leaving...\n"
	fi
	info "Installing Performance NPM...\n"
	if curl -fsSL https://get.pnpm.io/install.sh | sudo sh -; then
		success "Performance NPM is now installed!\n"
	else
		error "Couldn't install Performance NPM. Leaving...\n"
	fi
	info "Installing NVM..."
	if curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.2/install.sh | sudo bash; then
		success "NVM is now installed!\n"
	else
		error "Couldn't install NVM. Leaving...\n"
	fi
}

# Installs Python dev tools:
python_tools(){
	info "Installing Python-is-Python3...\n"
	if sudo nala install python-is-python3 -y; then
		success "Python-is-Python3 is now installed!\n"
	else
		error "Couldn't install Python-is-Python3. Leaving...\n"
	fi
	info "Installing pip...\n"
	if sudo nala install python3-pip -y; then
		success "pip is now installed!\n"
	else
		error "Couldn't install pip. Leaving...\n"
	fi
}

# Installs NNN:
nnn_setup(){
	info "Installing NNN...\n"
	if sudo nala install nnn -y; then
		success "NNN is now installed!\n"
	else
		error "Couldn't install NNN. Leaving...\n"
	fi
}

# Installs LaTeX (TeX-Live):
latex_setup(){
	info "Installing LaTeX...\n"
	info "This will take A LOT, so leave it to your dummy Latam-PC and go to do another stuff.\n"
	if sudo nala install texlive-full -y; then
		success "LaTeX was installed correctly!\n"
	else
		error "An error occurred when installing LaTeX.\n"
	fi
}

# Shell configs:
shell_config(){
	info "Setting ZSH as the DEFAULT shell..."
	if sudo chsh -s $(which zsh); then
		success "Changed the current shell to ZSH!"
	else
		fatal "Unable to configure the shell! (ZSH)"
	fi
	info "Backing up your old config files to \"~/.oldconf\"...\n"
	if sudo mkdir ~/.oldconf || sudo cp -f ~/.*shrc ~/.oldconf; then
		success "Your old config was backed up to \"~/.oldconf\"!\n"
	else
		error "Old config was not backed up!\n"
		if ! ask "Do you want to proceed?" "N"; then
			error "Operation aborted by the user. Aborting...\n"
			return 1
		fi
	fi
	info "Replacing shell config files...\n"
	if sudo cp -f ./shell/.*shrc ~/; then
		success "Shell configured!\n"
	else
		error "Couldn't configure shell...\n"
	fi
}

# Micro configs:
micro_config(){
	info "Replacing micro configs and adding custom features...\n"
	if sudo cp -rf ./micro ~/.config/; then
		success "Micro configured!\n"
	else
		error "Couldn't configure shell...\n"
	fi
	info "Installing plugins... (quotter, filemanager, comment)"
	if micro -plugin install quoter && micro -plugin install coment && micro -plugin install filemanager; then
		success "New plugins added to micro!"
	else
		error "Could not add the new plugins to micro."
	fi
	
}

# Print the welcome banner:
banner(){
	printf "${lgreen}"
	echo "*************************************************************************************"
	echo "*                        My Setup Settings! - @jakkunight                           *"
	echo "*                                                                                   *"
	echo "*             Source: https://github.com/jakkunight/my-setup-settings               *"
	echo "*************************************************************************************"
	echo ""
	printf "${reset}"
	warning "This script only works for Debian-based distros. Modify to use in other distros under your own risk.\n"
	warning "By using this script, you accept the risks it could bring to you, like data loss, useless programs/packages installed or broken dependencies.\n"
	warning "USE THIS UNDER YOUR OWN RISK OR READ THE SICRIPT AND MODIFY TO PREVENT THE PROBLEMS MENTIONED ABOVE!!!\n"
	warning "YOU HAVE BEEN WARNED!!!\n"
}


banner
basics
text_editors
tmux_powerline
js_tools
cpp_tools
python_tools
latex_setup
nnn_setup
shell_config
micro_config
