#!/bin/bash
#
# Script to mount my configs on any Debian-based linux distro.
# Author: Jakku Night (@jakkunight on GitHub and XDA Developers, jakku_night on Twitch and Jakku Night on YouTube.)
#
# This script and configurations are based on my own preferences, so if you want to add or remove features, 
# feel free to fork/clone this repo (https://github.com/jakkunight/my-setup-settings) and do your stuffs.
# I'm not responsable for damaging your system, making your computer blow up or causing a thermonuclear war.
# YOU HAVE BEEN WARNED.

# Define shell colors through ANSI ESCAPE SEQUENCES:
green="\e[32m"
red="\e[31m"
yellow="\e[33m"
blue="\e[34m"
lgreen="\e[92m"
lyellow="\e[93m"
lblue="\e[94m"
lmagenta="\e[95m"
lcyan="\e[96m"
blink_red="\033[05;31m"
restore="\033[0m"
reset="\e[0m"

# Define status logging functions:
# Shows an error message with colors:
# Usage: error <message>
# Example: error "An unexpected error ocurred."
error(){
	local msg="$@"
	if [[ -z $msg ]]; then
		msg="Unknwon ERROR. Aborting..."
	fi
	printf "${red}[ERROR]: ${msg}${reset}\n"
}

# Shows an info message with colors:
# Usage: info <message>
# Example: info "Executing command..."
info(){
	local msg="$@"
	if [[ -z $msg ]]; then
		msg="Nothing to notify."
	fi
	printf "${lcyan}[INFO]: ${msg}${reset}\n"
}

# Shows an success message with colors:
# Usage: success <message>
# Example: success "Done."
success(){
	local msg="$@"
	if [[ -z $msg ]]; then
		msg="Successfully ended."
	fi
	printf "${lgreen}[SUCCESS]: ${msg}${reset}\n"
}

# Shows an warning message with colors:
# Usage: warning <message>
# Example: warning "An unexpected error ocurred."
warning(){
	local msg="$@"
	if [[ -z $msg ]]; then
		msg="An error ocurred."
	fi
	printf "${lyellow}[WARNING]: ${msg}${reset}\n"
}

# Asks a "Y/N" question:
# Usage: ask <question> <default>
# Example: ask "Proceed?" "Y"
ask(){
	# Original function by:
	# http://djm.me/ask
	# Modifiyed for personal use by @jakkunight
	while true; do

		if [ "${2:-}" = "Y" ]; then
			prompt="Y/n"
			default=Y
		elif [ "${2:-}" = "N" ]; then
			prompt="y/N"
				default=N
		else
				prompt="y/n"
				default=
		fi

		# Ask the question
		printf "${lblue}[QUESTION]: ${1} [${prompt}]${reset} "
		read REPLY

		# Default?
		if [ -z "$REPLY" ]; then
			REPLY=$default
		fi

		# Check if the reply is valid
		case "$REPLY" in
			Y*|y*) return 0 ;;
			N*|n*) return 1 ;;
		esac
	done
}

# Pauses the program execution until the user presses ENTER:
pause(){
	local msg="$@"
	if [[ -z $msg ]]; then
		msg="Press ENTER to continue..."
	fi
	printf "${lmagenta}${msg}${reset}\n"
	read pause
}

# Critical Error and Exit:
fatal(){
	local msg="$@"
	if [[ -z $msg ]]; then
		msg="Unknwon ERROR. Aborting...\n"
	fi
	error $msg
	pause
	exit 1
}

# Shows a menu with options and returns the selected option:
# Usage: menu <title> <options>
# Example: cities=("Madrid" "Paris" "London" "Rome" "Berlin" "Amsterdam" "Tokyo" "Kyoto"); menu "Choose a city:" ${cities}
menu(){
	local title="$1"
	shift
	local options=("$@")
	if [[ -z "$title" ]]; then
		title="Choose an option:"
	fi
	printf "${lmagenta}"
	printf "${title}\n"
	select option; do
		if [[ 1 -le "$REPLY" && "$REPLY" -le "$#" ]]; then
			info "Choosed $option\n"
			return $(($REPLY-1));
		else
			warning "Choose a valid between 1~$#: \n"
			printf "${lmagenta}"
		fi
	done
	printf "${reset}\n"
}

# Program list:
# 	nala (as package manager frontend)
#	zsh (as default shell)
#	zsh-syntax-highlighting and zsh-autosuggestions (to have some interactivity)
# 	git (to program and clone some repos)
#	build-essentials (to build packages)
# 	cURL and wget (to download files)
# 	aria2 (to manage downloads)
# 	i3wm (as window manager)
# 	picom (as window composser)
# 	polybar (as statusbar)
# 	NerdFonts (to use icons)
# 	Firefox (as main web browser)
# 	Thunar (as GUI file manager)
# 	lightDM (as login and X11 session manager)
# 	dbus (to use GUI apps)
# 	rofi (app menu launcher)
# 	Flatpak (as external package manager)
# 	nnn as (terminal file manager)
# 	tmux (as terminal multiplexer)
# 	micro (as main terminal text editor)
# 	alacritty (as main terminal emulator)
# 	Visual Studio Code (as main code editor)
# 	NodeJS (to create JS/TS apps)
# 	npm (as standard package manager for NodeJS)
# 	pnpm (as main package manager)
# 	bun (as secondary JS/TS all-in-one dev environment)
# 	Python 3.xx (to create and run some programs and scripts)
# 	PostgreSQL (as secondary SQL database)
# 	MariaDB (as main SQL database)
# 	SQLite3 (as file-based database)
# 	Clang (as secondary compiler)
# 	CMake and Ninja (as main builders)
# 	Brave Web Browser (as secondary Chromium-based web browser)
# 	Discord (to chat with "friends")
# 	OBS Studio (to stream and record my screen)
# 	Kdenlive (to edit videos)
# 	GIMP (to edit images)
# 	Krita (to draw images and illustrations)
# 	Audacity (to edit and process audio)
# 	LMMS (to make some musics)
# 	alsa-utils (to control audio at hardware level)
# 	pulseaudio (to control audio at software level)
# 	texlive (to make PDF files with LaTeX)
# 	pandocs (to make PDF files with Markdown)
# 	lookatme (to visualize Markdown files into the terminal)
# 	htop (to get system and processes monitoring)
# 	GParted (to mange disks)
# 	Java Virtual Machine (to run Java programs)
# 	Powerlevel10k (to customize zsh)
# 	Powerline (to customize tmux)
# 	sudo (to "sudo")
# 	

# Setup env variables:
export pkgman="apt"
# Print the welcome banner:
banner(){
	return 0
}
check_root(){
	info "Checking for ROOT permissions..."
	export user="$(whoami)"
	export uid="$(id -u)"
	info "Found user ${user} with UID ${uid}"
	if [ "$uid" == "0" ]; then
		export HOME="/root"
		info "HOME directory is in ${HOME}"
		success "You have ROOT permissions!"
		export runas=""
		return 0
	fi
	info "HOME directory is in ${HOME}"
	warning "You may have no ROOT permissions!"
	info "Checking for 'sudo'..."
	if [[ -f "/usr/bin/sudo" || -f "/bin/sudo" ]]; then
		success "You have sudo installed in your system!"
		info "Checking your sudo rights..."
		sudo echo "SUDO"
		if ! ask "Can you see the 'SUDO' word?" "Y"; then
			fatal "You have not permisions to make changes on the system."
		fi
		success "You can use sudo to run the script!"
		export runas="sudo"
		return 0
	fi
	fatal "You have not permisions to make changes on the system."
}
# Updates the system via package manager
update_upgrade(){
	# Using APT:
	if [ "${pkgman}" == "apt" ]; then
		if ! "$runas" apt update; then
			error "Could not update the packages!"
			return 1
		fi
		if ! "$runas" apt upgrade -y; then
			error "Could not upgrade the packages!"
			return 1
		fi
		success "Your system is UP-TO-DATE!"
		return 0
	fi
	# Using nala:
	if [ "${pkgman}" == "nala" ]; then
		if ! "$runas" nala update; then
			error "Could not update the packages!"
			return 1
		fi
		if ! "$runas" nala upgrade -y; then
			error "Could not upgrade the packages!"
			return 1
		fi
		success "Your system is UP-TO-DATE!"
		return 0
	fi
	fatal "No package manager found."
}
# Installs a given list of packages.
# Example: pkgman pkg1 pkg2 pk3 ...
pkgman(){
	# Using APT:
	if [ "${pkgman}" == "apt" ]; then
		if ! "$runas" apt install "$@" -y; then
			error "Could not install one or more packages!"
			return 1
		fi
		success "Your system is UP-TO-DATE!"
		return 0
	fi
	# Using nala:
	if [ "${pkgman}" == "nala" ]; then
		if ! "$runas" nala install "$@" -y; then
			error "Could not install one or more packages!"
			return 1
		fi
		success "Your system is UP-TO-DATE!"
		return 0
	fi
	fatal "No pakage manager found."
}
# Installing nala to use as default package manager:
nalapkg(){
	# Set nala as default pakage manager:
	if ! pkgman nala; then
		warning "Could not install nala. Using apt instead..."
		return 0
	fi
	success "Nala has been installed!"
	export pkgman="nala"
	info "Using nala instead of apt..."
	return 0
}
# Basic tools, needed to install other tools:
basic(){
	info "Installing the basic setup..."
	info "Installing git, curl, wget, build-essential, cmake, ninja, aria2 and clang"
	if ! pkgman git curl wget build-essential cmake ninja-build aria2 clang; then
		fatal "Could not install the basic programs to mount the rest of the setup."
	fi
	warning "Flatpak is optional, but it will give you access to app that are not aviable via the package manager."
	if ! ask "Do you want to install flatpak?" "Y"; then
		info "Skipping flatpak..."
		success "Installed all the basic tools!"
		return 0
	fi
	info "Installing flatpak..."
	if ! pkgman flatpak; then
		warning "Couldn't install flatpak."
		success "Installed all the basic tools!"
		return 0	
	fi
	success "Installed flatpak!"
	info "Adding FlatHub repos..."
	if ! flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo; then
		warning "Couldn't add FlatHub repos!"
		info "Skipping..."
		success "Installed all the basic tools!"
		return 0
	fi
	success "Added flatpak repos!"
	success "Installed all the basic tools!"
	return 0
}
# Management tools, needed to control the system:
managers(){
	info "Installing management tools..."
	info "Installing alsa-utils, pavucontrol, pactl, udisks2, udiskie, dhcpcd, wpasupplicant and network-manager..."
	if ! pkgman alsa-utils pavucontrol pactl udisks2 udiskie dhcpc wpasupplicant network-manager; then
		error "Failed to install management tools."
		return 1
	fi
	success "Installed all management tools!"
	return 0
}
# Terminal-based tools:
terminal(){
	info "Installing terminal utilities..."
	info "Installing tmux from GitHub..."
	if ! pkgman autoconf automake pkg-config; then
		warning "Couldn't install necessary tools to build tmux."
		info "Using pakage manager instead..."
	fi
	if ! git clone https://github.com/tmux/tmux.git; then
		warning "Could not clone the repo."
		info "Using package manager instead..."
	else
		cd tmux
		if ! "$runas" ./autogen.sh; then
			warning "Couldn't generate the makefile."
			info ""
		fi
		if "$runas" ./configure && "$runas" make; then
		fi
	fi
	if ! pkgman tmux; then
		warning "Could not install tmux!"
	fi
	success "Installed tmux!"
	info "Customizing tmux statusline..."
	info "Installing micro..."
	if ! pkgman micro; then
		warning "Could not install micro!"
	fi
	info "Customizing micro..."
	info "Installing htop, zsh, zsh-syntax-highlighting and zsh-autosuggestions..."
	if ! pkgman zsh zsh-syntax-highlighting zsh-autosuggestions htop;then
		error "Couldn't install zsh!"
	fi
	info "Customizing the terminal..."
	echo "source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" >> ${ZDOTDIR:-$HOME}/.zshrc
	info "Installing Powerlevel10k..."
	info "Using zsh as default shell..."
}
# GUI environment:
gui(){
	info "Installing GUI environment..."
	info "Installing i3wm, polybar and rofi..."
	info "Configuing i3wm..."
	info "Configuing polybar..."
	info "Configuing rofi..."
}

# Execution:
banner
check_root
update_upgrade
nalapkg
basic
